
servomotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a71  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b1  00000000  00000000  00000ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043a  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  88:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer_0>:
	OCR1B = valor;
	
}
void giro4(int valor){
	
	OCR2A = valor;
  90:	84 b5       	in	r24, 0x24	; 36
  92:	81 6a       	ori	r24, 0xA1	; 161
  94:	84 bd       	out	0x24, r24	; 36
  96:	85 b5       	in	r24, 0x25	; 37
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	85 bd       	out	0x25, r24	; 37
  9c:	08 95       	ret

0000009e <timer_1>:
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 6a       	ori	r24, 0xA1	; 161
  a6:	80 83       	st	Z, r24
  a8:	e1 e8       	ldi	r30, 0x81	; 129
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <timer_2>:
  b4:	e0 eb       	ldi	r30, 0xB0	; 176
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	81 6a       	ori	r24, 0xA1	; 161
  bc:	80 83       	st	Z, r24
  be:	e1 eb       	ldi	r30, 0xB1	; 177
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <adc_0>:
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	86 68       	ori	r24, 0x86	; 134
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <adc_1>:
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	86 68       	ori	r24, 0x86	; 134
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <adc_2>:
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 68       	ori	r24, 0x86	; 134
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <adc_3>:
 100:	83 e4       	ldi	r24, 0x43	; 67
 102:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	86 68       	ori	r24, 0x86	; 134
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <adc_4>:
 112:	85 e4       	ldi	r24, 0x45	; 69
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	86 68       	ori	r24, 0x86	; 134
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <read_adc>:
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
 12e:	80 81       	ld	r24, Z
 130:	86 fd       	sbrc	r24, 6
 132:	fd cf       	rjmp	.-6      	; 0x12e <read_adc+0xa>
 134:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 138:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 13c:	08 95       	ret

0000013e <main>:


int main(void)
{
	
	DDRB |= (1<<PINB1)|(1<<PINB2)|(1<<PINB3);
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	8e 60       	ori	r24, 0x0E	; 14
 142:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PIND3)|(1<<PIND5)|(1<<PIND6);
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	88 66       	ori	r24, 0x68	; 104
 148:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00;
 14a:	17 b8       	out	0x07, r1	; 7
	
	timer_0();
 14c:	0e 94 48 00 	call	0x90	; 0x90 <timer_0>
	timer_1();
 150:	0e 94 4f 00 	call	0x9e	; 0x9e <timer_1>
	timer_2();
 154:	0e 94 5a 00 	call	0xb4	; 0xb4 <timer_2>
	{	
		
		
		adc_0();
		adc0 = read_adc();
		adc0 = adc0*39/1023;
 158:	c7 e2       	ldi	r28, 0x27	; 39
 15a:	0f ef       	ldi	r16, 0xFF	; 255
 15c:	13 e0       	ldi	r17, 0x03	; 3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void giro0(int valor){
	
	OCR0A = valor;
 15e:	0f 2e       	mov	r0, r31
 160:	f4 e1       	ldi	r31, 0x14	; 20
 162:	6f 2e       	mov	r6, r31
 164:	f0 2d       	mov	r31, r0
	
}
void giro1(int valor){
	
	OCR0B = valor;
 166:	0f 2e       	mov	r0, r31
 168:	fe e1       	ldi	r31, 0x1E	; 30
 16a:	7f 2e       	mov	r7, r31
 16c:	f0 2d       	mov	r31, r0
	
}
void giro2(int valor){
	
	OCR1A = valor;
 16e:	0f 2e       	mov	r0, r31
 170:	f8 e8       	ldi	r31, 0x88	; 136
 172:	8f 2e       	mov	r8, r31
 174:	91 2c       	mov	r9, r1
 176:	f0 2d       	mov	r31, r0
 178:	0f 2e       	mov	r0, r31
 17a:	f4 e1       	ldi	r31, 0x14	; 20
 17c:	af 2e       	mov	r10, r31
 17e:	b1 2c       	mov	r11, r1
 180:	f0 2d       	mov	r31, r0
	
}
void giro3(int valor){
	
	OCR1B = valor;
 182:	0f 2e       	mov	r0, r31
 184:	fa e8       	ldi	r31, 0x8A	; 138
 186:	cf 2e       	mov	r12, r31
 188:	d1 2c       	mov	r13, r1
 18a:	f0 2d       	mov	r31, r0
	
}
void giro4(int valor){
	
	OCR2A = valor;
 18c:	0f 2e       	mov	r0, r31
 18e:	f3 eb       	ldi	r31, 0xB3	; 179
 190:	ef 2e       	mov	r14, r31
 192:	f1 2c       	mov	r15, r1
 194:	f0 2d       	mov	r31, r0
 196:	dc e3       	ldi	r29, 0x3C	; 60
	
	while (1)
	{	
		
		
		adc_0();
 198:	0e 94 65 00 	call	0xca	; 0xca <adc_0>
		adc0 = read_adc();
 19c:	0e 94 92 00 	call	0x124	; 0x124 <read_adc>
		adc0 = adc0*39/1023;
 1a0:	9c 01       	movw	r18, r24
 1a2:	c2 9f       	mul	r28, r18
 1a4:	c0 01       	movw	r24, r0
 1a6:	c3 9f       	mul	r28, r19
 1a8:	90 0d       	add	r25, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	b8 01       	movw	r22, r16
 1ae:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodhi4>
 1b2:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <adc0+0x1>
 1b6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <adc0>
		if (adc0 >= 20){
 1ba:	64 31       	cpi	r22, 0x14	; 20
 1bc:	71 05       	cpc	r23, r1
 1be:	10 f0       	brcs	.+4      	; 0x1c4 <main+0x86>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void giro0(int valor){
	
	OCR0A = valor;
 1c0:	67 bc       	out	0x27, r6	; 39
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <main+0x88>
 1c4:	67 bd       	out	0x27, r22	; 39
			giro0(20);	
		}else{
			giro0(adc0);
		}
		
		adc_1();
 1c6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_1>
		adc1 = read_adc();
 1ca:	0e 94 92 00 	call	0x124	; 0x124 <read_adc>
		adc1 = adc1*39/1023;
 1ce:	fc 01       	movw	r30, r24
 1d0:	ce 9f       	mul	r28, r30
 1d2:	c0 01       	movw	r24, r0
 1d4:	cf 9f       	mul	r28, r31
 1d6:	90 0d       	add	r25, r0
 1d8:	11 24       	eor	r1, r1
 1da:	b8 01       	movw	r22, r16
 1dc:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodhi4>
 1e0:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <adc1+0x1>
 1e4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <adc1>
		if (adc1 >= 30){
 1e8:	6e 31       	cpi	r22, 0x1E	; 30
 1ea:	71 05       	cpc	r23, r1
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <main+0xb4>
	OCR0A = valor;
	
}
void giro1(int valor){
	
	OCR0B = valor;
 1ee:	78 bc       	out	0x28, r7	; 40
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <main+0xb6>
 1f2:	68 bd       	out	0x28, r22	; 40
			giro1(30);
		}else{
			giro1(adc1);
		}
		
		adc_2();
 1f4:	0e 94 77 00 	call	0xee	; 0xee <adc_2>
		adc2 = read_adc();
 1f8:	0e 94 92 00 	call	0x124	; 0x124 <read_adc>
		adc2 = adc2*39/1023;
 1fc:	9c 01       	movw	r18, r24
 1fe:	c2 9f       	mul	r28, r18
 200:	c0 01       	movw	r24, r0
 202:	c3 9f       	mul	r28, r19
 204:	90 0d       	add	r25, r0
 206:	11 24       	eor	r1, r1
 208:	b8 01       	movw	r22, r16
 20a:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodhi4>
 20e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <adc2+0x1>
 212:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <adc2>
		if (adc2 >= 20){
 216:	64 31       	cpi	r22, 0x14	; 20
 218:	71 05       	cpc	r23, r1
 21a:	20 f0       	brcs	.+8      	; 0x224 <main+0xe6>
	OCR0B = valor;
	
}
void giro2(int valor){
	
	OCR1A = valor;
 21c:	f4 01       	movw	r30, r8
 21e:	b1 82       	std	Z+1, r11	; 0x01
 220:	a0 82       	st	Z, r10
 222:	01 c0       	rjmp	.+2      	; 0x226 <main+0xe8>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void giro0(int valor){
	
	OCR0A = valor;
 224:	67 bd       	out	0x27, r22	; 39
			giro2(20);
		}else{
			giro0(adc2);
		}
		
		adc_3();
 226:	0e 94 80 00 	call	0x100	; 0x100 <adc_3>
		adc3 = read_adc();
 22a:	0e 94 92 00 	call	0x124	; 0x124 <read_adc>
		adc3 = adc3*39/1023;
 22e:	9c 01       	movw	r18, r24
 230:	c2 9f       	mul	r28, r18
 232:	c0 01       	movw	r24, r0
 234:	c3 9f       	mul	r28, r19
 236:	90 0d       	add	r25, r0
 238:	11 24       	eor	r1, r1
 23a:	b8 01       	movw	r22, r16
 23c:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodhi4>
 240:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <adc3+0x1>
 244:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <adc3>
		if (adc3 >= 20){
 248:	64 31       	cpi	r22, 0x14	; 20
 24a:	71 05       	cpc	r23, r1
 24c:	20 f0       	brcs	.+8      	; 0x256 <main+0x118>
	OCR1A = valor;
	
}
void giro3(int valor){
	
	OCR1B = valor;
 24e:	f6 01       	movw	r30, r12
 250:	b1 82       	std	Z+1, r11	; 0x01
 252:	a0 82       	st	Z, r10
 254:	03 c0       	rjmp	.+6      	; 0x25c <main+0x11e>
 256:	f6 01       	movw	r30, r12
 258:	71 83       	std	Z+1, r23	; 0x01
 25a:	60 83       	st	Z, r22
			giro3(20);
		}else{
			giro3(adc3);
		}
		
		adc_4();
 25c:	0e 94 89 00 	call	0x112	; 0x112 <adc_4>
		adc4 = read_adc();
 260:	0e 94 92 00 	call	0x124	; 0x124 <read_adc>
		adc4 = adc4*39/255;
 264:	c8 9f       	mul	r28, r24
 266:	90 01       	movw	r18, r0
 268:	c9 9f       	mul	r28, r25
 26a:	30 0d       	add	r19, r0
 26c:	11 24       	eor	r1, r1
 26e:	a1 e8       	ldi	r26, 0x81	; 129
 270:	b0 e8       	ldi	r27, 0x80	; 128
 272:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__umulhisi3>
 276:	88 0f       	add	r24, r24
 278:	89 2f       	mov	r24, r25
 27a:	88 1f       	adc	r24, r24
 27c:	99 0b       	sbc	r25, r25
 27e:	91 95       	neg	r25
 280:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <adc4+0x1>
 284:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <adc4>
		//giro4(29); //minimo
	
		//giro4(160);// maximo
		
		
		if (adc4 >= 60){
 288:	8c 33       	cpi	r24, 0x3C	; 60
 28a:	91 05       	cpc	r25, r1
 28c:	18 f0       	brcs	.+6      	; 0x294 <main+0x156>
	OCR1B = valor;
	
}
void giro4(int valor){
	
	OCR2A = valor;
 28e:	f7 01       	movw	r30, r14
 290:	d0 83       	st	Z, r29
 292:	82 cf       	rjmp	.-252    	; 0x198 <main+0x5a>
 294:	f7 01       	movw	r30, r14
 296:	80 83       	st	Z, r24
 298:	7f cf       	rjmp	.-258    	; 0x198 <main+0x5a>

0000029a <__udivmodhi4>:
 29a:	aa 1b       	sub	r26, r26
 29c:	bb 1b       	sub	r27, r27
 29e:	51 e1       	ldi	r21, 0x11	; 17
 2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <__udivmodhi4_ep>

000002a2 <__udivmodhi4_loop>:
 2a2:	aa 1f       	adc	r26, r26
 2a4:	bb 1f       	adc	r27, r27
 2a6:	a6 17       	cp	r26, r22
 2a8:	b7 07       	cpc	r27, r23
 2aa:	10 f0       	brcs	.+4      	; 0x2b0 <__udivmodhi4_ep>
 2ac:	a6 1b       	sub	r26, r22
 2ae:	b7 0b       	sbc	r27, r23

000002b0 <__udivmodhi4_ep>:
 2b0:	88 1f       	adc	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	5a 95       	dec	r21
 2b6:	a9 f7       	brne	.-22     	; 0x2a2 <__udivmodhi4_loop>
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	bc 01       	movw	r22, r24
 2be:	cd 01       	movw	r24, r26
 2c0:	08 95       	ret

000002c2 <__umulhisi3>:
 2c2:	a2 9f       	mul	r26, r18
 2c4:	b0 01       	movw	r22, r0
 2c6:	b3 9f       	mul	r27, r19
 2c8:	c0 01       	movw	r24, r0
 2ca:	a3 9f       	mul	r26, r19
 2cc:	70 0d       	add	r23, r0
 2ce:	81 1d       	adc	r24, r1
 2d0:	11 24       	eor	r1, r1
 2d2:	91 1d       	adc	r25, r1
 2d4:	b2 9f       	mul	r27, r18
 2d6:	70 0d       	add	r23, r0
 2d8:	81 1d       	adc	r24, r1
 2da:	11 24       	eor	r1, r1
 2dc:	91 1d       	adc	r25, r1
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
